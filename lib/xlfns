#!/usr/bin/env bash

# If directory does not exist, make it
chkmk () { 
    if [ ! -d "$1" ]; then 
        mkdir -p "$1"
        ctxt g "Created directory: $1" 
    fi
}

XLOTUS_CFG="$HOME/.config/xlotus"
XLOTUS_BIN="$HOME/.local/bin"
XLOTUS_LIB="$HOME/.local/lib/xlotus"
XLOTUS_CACHE="$HOME/.cache/xlotus"
XLOTUS_HELP="$HOME/.local/share/xlotus/help"

chkmk "$XLOTUS_CFG"
chkmk "$XLOTUS_BIN"
chkmk "$XLOTUS_LIB"
chkmk "$XLOTUS_HELP"
chkmk "$XLOTUS_CACHE"

# Fuzzy finder command.
fzfcmd () { 
    fzf --color=preview-bg:'#282829',pointer:1,prompt:4,hl:4,bg+:'#45403d',fg+:7,hl+:1 \
        --bind 'tab:toggle+up,shift-tab:toggle+down,change:first' \
        --tiebreak=begin \
        --prompt="$1 > " \
        "${@:2}"
}

# Notification daemon.
notifier () { 
    case $1 in
        normal) notify-send -i "$2" "$3" "\n<b><u>$4</u></b>\n\n${*:5}"  ;;
        invalid) notify-send -i "dialog-error" "$2" "\n<b><u>Invalid argument</u>: '$3'</b>\n\n${*:4}" ;;
        err) notify-send -i "dialog-error" "$2" "\n<b><u>$3</u></b>\n\n${*:4}"  ;;
    esac
}

# Empty fzf for prompt.
fzfprompt () {
    echo "" |\
        fzf --print-query -0 \
            --color=pointer:0,prompt:4,hl:4,bg+:0,fg+:7,hl+:1 \
            --header="" \
            --no-info \
            --prompt="$1 > " \
            "${@:2}" | sed '/^$/d'
}

# MPV + yt-dlp.
mpvcmd () {
    notifier normal \
        "im-youtube" \
        "Mpv (mpvcmd)" \
        "Your video will run shortly"

    if ! mpv "$@"; then
        notifier err \
            "Mpv (mpvcmd)" \
            "mpv (yt-dlp) failed to run url" \
            "<b>Make sure it can be handled by yt-dlp</b>"
    fi
}

# Color text.
ctxt () {
    ctxtBeginSeq="\033["
    ctxtResetSeq="\033[0m"

    case $1 in
          black)    ctxtColor=0 ;; # Black
          r)        ctxtColor=1 ;; # Red
          g)        ctxtColor=2 ;; # Green
          y)        ctxtColor=3 ;; # Yellow
          b)        ctxtColor=4 ;; # Blue
          p)        ctxtColor=5 ;; # Purple
          c)        ctxtColor=6 ;; # Cyan
          w)        ctxtColor=7 ;; # White
    esac

    echo -e "${ctxtBeginSeq}0;3${ctxtColor}m${2}${ctxtResetSeq}"
}

# Check number type (int or float) and value (positive or negative).
checkNum () {
    if [[ $1 =~ ^[+]?[0-9]+$ ]]; then
        numType="int"
    elif [[ $1 =~ ^[-][0-9]+$ ]]; then
        numType="-int"
    elif [[ $1 =~ ^[+]?[0-9]+([.][0-9]+)?$ ]]; then
        numType="float"
    elif [[ $1 =~ ^[-][0-9]+([.][0-9]+)?$ ]]; then
        numType="-float"
    else
        numType="NaN"
    fi
    
    echo "$numType"
}

# Check rgb color.
checkRGB () {
    checkRGBVal=$(checkNum "$2")

    case $1 in
        r) msgColor="r Red" ;;
        g) msgColor="g Green" ;;
        b) msgColor="b Blue" ;;
    esac
    
    msgColorName=$(ctxt "$msgColor")

    if [ -z "$2" ]; then
        printf "%-17s : %14s\n" "$msgColorName" "Empty value"
        checkColorVal="invalidRGB"
    elif [[ "$checkRGBVal" != "int" ]]; then
        printf "%-17s : %17s\n" "$msgColorName" "Not an integer"
        checkColorVal="invalidRGB"
    fi
}

# Split rgb into its 3 colors.
split_rgb () {
    rgb=$(echo "$1" | sed 's/^rgb(//g; s/)$//g')
    r=$(echo "$rgb" | awk -F ',' '{print $1}')
    g=$(echo "$rgb" | awk -F ',' '{print $2}')
    b=$(echo "$rgb" | awk -F ',' '{print $3}')
}

# Check type of color (hex, rgb, term or invalid).
checkColor () {
    if [[ "$1" =~ ^"#" ]] && [[ ${#1} == 7 ]]; then
        checkColorVal="hex"
    elif [[ "$1" =~ ^"rgb(".*")"$ ]]; then
        split_rgb "$1"

        checkRGB r "$r"
        checkRGB g "$g"
        checkRGB b "$b"

        if [[ "$checkColorVal" != "invalidRGB" ]]; then
            checkColorVal="rgb"
        fi
    elif [ ${#1} -le 3 ] && [ "$(checkNum "$1")" == "int" ] && [ "$1" -lt 256 ]; then
        checkColorVal="term"
    else
        checkColorVal="invalid"
    fi
}

# Check if there's internet connection.
checkNetwork () {
    if ! curl -m 5 -s https://google.com > /dev/null; then
        notifier err \
            "$1" \
            "No Connection available"
        exit 1
    fi
}
